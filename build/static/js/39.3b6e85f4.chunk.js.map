{"version":3,"sources":["actions/mediaActions.js","views/Setting/MediaManagement/MediaManagement.js"],"names":["PROXY","process","MediaManagement","props","onFieldChange","e","state","page","type","target","name","getMediaDetails","value","setState","fields","onMediaStatusChange","media","flag","cmsFlag","id","_id","changeMediaStatus","then","res","toast","success","data","message","catch","err","swal","toggleMediaModal","showModal","imageType","cover_photo","cover_photo_preview","image_name","errors","error_image_name","error_imageType","error_cover_photo","openModal","onPhotoChange","a","files","length","file","match","URL","createObjectURL","onDeleteMedia","title","text","icon","buttons","dangerMode","willDelete","pageLength","deleteMedia","error","response","onSaveTour","preventDefault","errImageTitle","errImageType","errCoverPhoto","validationFlag","checkEmptyValidation","saveLoading","tourData","FormData","append","addMedia","result","updateMedia","onPageClick","this","image_path","totalPages","hasPrevPage","hasNextPage","prevPage","nextPage","Pages","skipped","i","test","item","Fragment","PaginationItem","PaginationLink","disabled","tag","active","onClick","push","Pagination","previous","next","mediaDetails","mediaLoading","className","position","autoClose","style","zIndex","Row","Col","xs","Card","CardHeader","CardBody","md","onChange","arrow","distance","trigger","Button","size","Table","responsive","striped","docs","map","variant","color","checked","label","dataOn","dataOff","onEditMediaModal","colSpan","Spinner","paginationSection","Modal","isOpen","ModalHeader","toggle","ModalBody","FormGroup","row","placeholder","rows","defaultValue","classnames","height","src","alt","ModalFooter","loading","ZOOM_OUT","Component","connect","limit","dispatch","axios","get","GET_ALL_MEDIA","payload","tour","put","post","getMediaDetailsById","patch","delete"],"mappings":"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","file":"static/js/39.3b6e85f4.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { GET_ALL_MEDIA } from './types'\r\nconst PROXY = process.env.REACT_APP_URL + 'api/'\r\n\r\nexport const getMediaDetails = (page, limit, type) => async (dispatch) => {\r\n  const res = await axios.get(\r\n    PROXY + 'media?page=' + page + '&limit=' + limit + 'type=' + type\r\n  )\r\n  dispatch({\r\n    type: GET_ALL_MEDIA,\r\n    payload: res.data.result,\r\n  })\r\n}\r\n\r\nexport const changeMediaStatus = (id, tour) => async (dispatch) => {\r\n  const res = await axios.put(PROXY + 'media/change-status/' + id, tour)\r\n  return res\r\n}\r\n\r\nexport const addMedia = (tour) => async (dispatch) => {\r\n  const res = await axios.post(PROXY + 'media', tour)\r\n  return res\r\n}\r\n\r\nexport const updateMedia = (id, tour) => async (dispatch) => {\r\n  const res = await axios.put(PROXY + 'media/' + id, tour)\r\n  return res\r\n}\r\n\r\nexport const getMediaDetailsById = (id, tour) => async (dispatch) => {\r\n  const res = await axios.patch(PROXY + 'media/' + id)\r\n  return res\r\n}\r\n\r\nexport const deleteMedia = (id) => async (dispatch) => {\r\n  return await axios.delete(PROXY + 'media/' + id)\r\n}\r\n","import { AppSwitch } from '@coreui/react'\r\n// import 'antd/dist/antd.css'\r\nimport classnames from 'classnames'\r\nimport 'ladda/dist/ladda-themeless.min.css'\r\nimport 'quill/dist/quill.snow.css'\r\nimport React, { Component } from 'react'\r\nimport LaddaButton, { ZOOM_OUT } from 'react-ladda'\r\nimport { connect } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  FormGroup,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  Row,\r\n  Spinner,\r\n  Table,\r\n} from 'reactstrap'\r\nimport swal from 'sweetalert'\r\nimport {\r\n  getMediaDetails,\r\n  changeMediaStatus,\r\n  addMedia,\r\n  updateMedia,\r\n  getMediaDetailsById,\r\n  deleteMedia,\r\n} from '../../../actions/mediaActions'\r\nimport { checkEmptyValidation } from '../../../Helpers/Validation'\r\n// import '../Dashboard/Dashboard.css'\r\nimport { Tooltip } from 'react-tippy'\r\n\r\nclass MediaManagement extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      page: 1,\r\n      pageLength: 10,\r\n      showModal: false,\r\n      saveLoading: false,\r\n      type: '',\r\n      fields: {\r\n        _id: null,\r\n        image_name: '',\r\n        imageType: '',\r\n        cover_photo: '',\r\n        cover_photo_preview: '',\r\n      },\r\n      errors: {\r\n        error_image_name: '',\r\n        error_imageType: '',\r\n        error_cover_photo: '',\r\n      },\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let { page, pageLength, type } = this.state\r\n    this.props.getMediaDetails(page, pageLength, type)\r\n  }\r\n\r\n  /**\r\n   * Function called for pageLimit and onchnage method update the text.\r\n   * @param {*} e\r\n   * @memberof MediaManagement\r\n   */\r\n  onFieldChange = (e) => {\r\n    const { page, type } = this.state\r\n    if (e.target.name === 'pageLength') {\r\n      this.props.getMediaDetails(page, e.target.value, type)\r\n    }\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n      fields: {\r\n        ...this.state.fields,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * For changing the enbale / disable method.\r\n   * @param {*} cms grtting the flag value\r\n   * @memberof MediaManagement\r\n   */\r\n  onMediaStatusChange = (media) => {\r\n    let { flag } = media\r\n    media.flag = 1\r\n    if (flag === 1) {\r\n      media.flag = 2\r\n    }\r\n    let cmsFlag = {\r\n      flag: media.flag,\r\n    }\r\n    let id = media._id\r\n    this.props\r\n      .changeMediaStatus(id, cmsFlag)\r\n      .then((res) => {\r\n        toast.success(res.data.message)\r\n      })\r\n      .catch((err) => {\r\n        swal('Error!', `Error occurred, Please try again later!`, 'error')\r\n      })\r\n  }\r\n\r\n  /**\r\n   * For toggling the modal of update and add.\r\n   * @param {*} e\r\n   * @memberof MediaManagement\r\n   */\r\n  toggleMediaModal = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      showModal: false,\r\n      fields: {\r\n        _id: null,\r\n        imageType: '',\r\n        cover_photo: '',\r\n        cover_photo_preview: '',\r\n        image_name: '',\r\n      },\r\n      errors: {\r\n        error_image_name: '',\r\n        error_imageType: '',\r\n        error_cover_photo: '',\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * for opening the modal for add and update\r\n   * @param {*} e\r\n   * @memberof MediaManagement\r\n   */\r\n  openModal = (e) => {\r\n    this.setState({\r\n      ...this.state,\r\n      showModal: true,\r\n      fields: {\r\n        _id: null,\r\n        imageType: '',\r\n        cover_photo: '',\r\n        cover_photo_preview: '',\r\n      },\r\n      errors: {\r\n        error_image_name: '',\r\n        error_imageType: '',\r\n        error_cover_photo: '',\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * To validate and upload photo in the upload field\r\n   * @param {*} e\r\n   * @memberof MediaManagement\r\n   */\r\n  onPhotoChange = async (e) => {\r\n    let validateImage = true\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const file = e.target.files[0]\r\n      validateImage = false\r\n      if (!file) {\r\n        validateImage = false\r\n        this.setState({\r\n          errors: {\r\n            ...this.state.errors,\r\n            error_cover_photo: 'Please select image.',\r\n          },\r\n        })\r\n      } else if (!file.name.match(/\\.(png|PNG|jpg|JPG|jpeg|JPEG|gif|GIF)$/)) {\r\n        validateImage = false\r\n        this.setState({\r\n          ...this.state,\r\n          fields: {\r\n            ...this.state.fields,\r\n            cover_photo: '',\r\n          },\r\n          errors: {\r\n            ...this.state.errors,\r\n            error_cover_photo: 'Please select valid image.',\r\n          },\r\n        })\r\n      } else {\r\n        validateImage = true\r\n        this.setState({\r\n          ...this.state,\r\n          fields: {\r\n            ...this.state.fields,\r\n            cover_photo: file,\r\n            cover_photo_preview: URL.createObjectURL(file),\r\n          },\r\n          errors: {\r\n            ...this.state.errors,\r\n            error_cover_photo: '',\r\n          },\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To get the value in the edit modal form the api\r\n   * @param {*} data\r\n   * @memberof MediaManagement\r\n   */\r\n  onEditMediaModal(data) {\r\n    this.setState({\r\n      ...this.state,\r\n      showModal: true,\r\n      fields: {\r\n        _id: data._id,\r\n        image_name: data.image_name,\r\n        imageType: data.type,\r\n        cover_photo: data.image_path,\r\n        cover_photo_preview: data.image_path,\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * To get the value in the edit modal form the api\r\n   * @param {*} media\r\n   * @memberof MediaManagement\r\n   */\r\n  onDeleteMedia = (media) => {\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: `Are you sure that you want to delete ${media.image_name}?`,\r\n      icon: 'warning',\r\n      buttons: true,\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        const { page, pageLength, type } = this.state\r\n\r\n        this.props\r\n          .deleteMedia(media._id)\r\n          .then((res) => {\r\n            this.props.getMediaDetails(page, pageLength, type)\r\n            toast.success(res.data.message)\r\n          })\r\n          .catch((err) => {\r\n            toast.error(err.response.data.message)\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Function called for updating and adding the fields in the update and add api.\r\n   * @param {*} e\r\n   * @memberof MediaManagement\r\n   */\r\n  onSaveTour = (e) => {\r\n    e.preventDefault()\r\n    const { _id, imageType, image_name, cover_photo } = this.state.fields\r\n    const { errors, page, pageLength, type } = this.state\r\n    let validationFlag = true\r\n    let errImageTitle = null\r\n    let errImageType = null\r\n    let errCoverPhoto = null\r\n    errImageTitle = checkEmptyValidation(image_name, 'Image Title ')\r\n    errCoverPhoto = checkEmptyValidation(cover_photo, 'Image ')\r\n    errImageType = checkEmptyValidation(imageType, 'Image Type ')\r\n    if (errImageTitle || errCoverPhoto || errImageType) {\r\n      validationFlag = false\r\n      this.setState({\r\n        errors: {\r\n          error_image_name: errImageTitle,\r\n          error_imageType: errImageType,\r\n          error_cover_photo: errCoverPhoto,\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        errors: {\r\n          error_image_name: '',\r\n          error_imageType: '',\r\n          error_cover_photo: '',\r\n        },\r\n      })\r\n    }\r\n    if (validationFlag) {\r\n      this.setState({ saveLoading: true })\r\n      const tourData = new FormData()\r\n      tourData.append('image_name', image_name)\r\n      tourData.append('type', imageType)\r\n      tourData.append('image_path', cover_photo)\r\n      if (_id === null) {\r\n        this.props\r\n          .addMedia(tourData)\r\n          .then((result) => {\r\n            this.props.getMediaDetails(page, pageLength, type).then((res) => {\r\n              toast.success(result.data.message)\r\n              this.setState({ saveLoading: false, showModal: false })\r\n            })\r\n          })\r\n          .catch((err) => {\r\n            this.setState({ saveLoading: false, showModal: false })\r\n            toast.error(err.response.data.message)\r\n            swal('Error!', `Error occurred, Please try again later!`, 'error')\r\n          })\r\n      } else {\r\n        let id = _id\r\n        this.props\r\n          .updateMedia(id, tourData)\r\n          .then((result) => {\r\n            this.props.getMediaDetails(page, pageLength, type)\r\n            toast.success(result.data.message)\r\n            this.setState({ saveLoading: false, showModal: false })\r\n          })\r\n          .catch((err) => {\r\n            toast.error(err.response.data.message)\r\n            this.setState({ saveLoading: false, showModal: false })\r\n          })\r\n      }\r\n      this.setState({\r\n        errors,\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function called for pagination: page number dropdown\r\n   * @param {*} page\r\n   * @memberof MediaManagement\r\n   */\r\n  onPageClick = (page) => {\r\n    const { pageLength } = this.state\r\n    this.props.getMediaDetails(page, pageLength)\r\n  }\r\n\r\n  /**\r\n   * Function called for pagination: moving into next page\r\n   * @param {*} page\r\n   * @memberof MediaManagement\r\n   */\r\n  paginationSection(data) {\r\n    const { page, totalPages, hasPrevPage, hasNextPage, prevPage, nextPage } =\r\n      data\r\n    let Pages = []\r\n    let skipped = 0\r\n    for (var i = 1; i <= totalPages; i++) {\r\n      if (\r\n        i === 1 ||\r\n        (page < 4 && i <= 5) ||\r\n        i === page - 1 ||\r\n        i === page + 1 ||\r\n        i === page ||\r\n        i === totalPages ||\r\n        (page >= totalPages - 3 && i >= totalPages - 4)\r\n      ) {\r\n        const test = i\r\n        const item = (\r\n          <React.Fragment key={i}>\r\n            {skipped === 1 ? (\r\n              <PaginationItem>\r\n                <PaginationLink disabled tag='button'>\r\n                  ...\r\n                </PaginationLink>\r\n              </PaginationItem>\r\n            ) : null}\r\n            <PaginationItem\r\n              active={page === i ? true : false}\r\n              onClick={page === i ? () => null : () => this.onPageClick(test)}\r\n              key={i}>\r\n              <PaginationLink tag='button'>{i}</PaginationLink>\r\n            </PaginationItem>\r\n          </React.Fragment>\r\n        )\r\n        skipped = 0\r\n        Pages.push(item)\r\n      } else {\r\n        skipped = 1\r\n      }\r\n    }\r\n\r\n    return (\r\n      <nav>\r\n        <Pagination>\r\n          <PaginationItem\r\n            onClick={\r\n              hasPrevPage === true ? () => this.onPageClick(prevPage) : null\r\n            }>\r\n            <PaginationLink\r\n              previous\r\n              disabled={hasPrevPage === true ? false : true}\r\n              tag='button'>\r\n              Prev\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n          {Pages}\r\n\r\n          <PaginationItem\r\n            onClick={\r\n              hasNextPage === true ? () => this.onPageClick(nextPage) : null\r\n            }>\r\n            <PaginationLink\r\n              next\r\n              tag='button'\r\n              disabled={hasNextPage === true ? false : true}>\r\n              Next\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        </Pagination>\r\n      </nav>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const containerStyle = {\r\n      zIndex: 1999,\r\n    }\r\n    const { showModal, saveLoading, errors, pageLength } = this.state\r\n    const { imageType, image_name, cover_photo_preview } = this.state.fields\r\n    const { mediaDetails, mediaLoading } = this.props.mediaDetails\r\n    let { page } = mediaDetails\r\n    page = page - 1\r\n    return (\r\n      <div className='animated fadeIn'>\r\n        <ToastContainer\r\n          position='top-right'\r\n          autoClose={3000}\r\n          style={containerStyle}\r\n        />\r\n        <Row>\r\n          <Col xs='12'>\r\n            <Card className='card-style shadow'>\r\n              <CardHeader>\r\n                <i className='fa fa-picture-o'></i>\r\n                <strong>Media Management</strong>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md='6' className='pl-3'>\r\n                    <div className='text-left'>\r\n                      <span className=''>Show</span>\r\n                      <select\r\n                        type='text'\r\n                        name='pageLength'\r\n                        value={pageLength}\r\n                        onChange={(e) => this.onFieldChange(e)}\r\n                        className='form-control list-width input  d-inline  mx-2'>\r\n                        <option value={10}>10</option>\r\n                        <option value={20}>20</option>\r\n                        <option value={50}>50 </option>\r\n                        <option value={100}>100 </option>\r\n                      </select>\r\n\r\n                      <span className=''>Entries </span>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md='6' className='mb-2'>\r\n                    <div className='text-right'>\r\n                      <Tooltip\r\n                        title='Add new media'\r\n                        position='bottom'\r\n                        arrow={true}\r\n                        distance={15}\r\n                        trigger='mouseenter'>\r\n                        <Button\r\n                          size='md'\r\n                          className='btnColor btn-brand mr-1 '\r\n                          onClick={this.openModal}>\r\n                          <i className='fa fa-plus'></i>\r\n                          <span>Add </span>\r\n                        </Button>\r\n                      </Tooltip>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <Table\r\n                  responsive\r\n                  striped\r\n                  className='mt-2 customDataTable text-center'>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>No.</th>\r\n                      <th>Image Name</th>\r\n                      <th>Image Type</th>\r\n                      <th className='text-left'>Status</th>\r\n                      <th>Action</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {!mediaLoading && mediaDetails.docs.length > 0 ? (\r\n                      mediaDetails.docs.map((data, i) => (\r\n                        <tr key={i}>\r\n                          <td>{page * pageLength + (i + 1)}</td>\r\n                          <td>{data.image_name}</td>\r\n                          <td>\r\n                            {data.type === 1\r\n                              ? 'Home'\r\n                              : data.type === 2\r\n                              ? 'Favicon'\r\n                              : ''}\r\n                          </td>\r\n                          <td>\r\n                            <AppSwitch\r\n                              className='d-block mt-1'\r\n                              variant='3d'\r\n                              color='primary'\r\n                              name='status'\r\n                              checked={data.flag === 1 ? true : false}\r\n                              label\r\n                              dataOn={'\\u2715'}\r\n                              dataOff={'\\u2713'}\r\n                              onClick={() => this.onMediaStatusChange(data)}\r\n                            />\r\n                          </td>\r\n                          <td>\r\n                            <Tooltip\r\n                              title='Edit media'\r\n                              position='bottom'\r\n                              arrow={true}\r\n                              distance={15}\r\n                              trigger='mouseenter'>\r\n                              <Button\r\n                                size='md'\r\n                                className='btn-behance btn-brand ml-2'\r\n                                onClick={() => this.onEditMediaModal(data)}\r\n                                type='button'>\r\n                                <i className='fa fa-pencil'></i>\r\n                              </Button>\r\n                            </Tooltip>\r\n                            <Tooltip\r\n                              position='bottom'\r\n                              arrow={true}\r\n                              distance={15}\r\n                              trigger='mouseenter'\r\n                              title='Delete media'>\r\n                              <Button\r\n                                size='md'\r\n                                className='btn-youtube btn-brand ml-2'\r\n                                onClick={() => this.onDeleteMedia(data)}\r\n                                type='button'>\r\n                                <i className='fa fa-trash'></i>\r\n                              </Button>\r\n                            </Tooltip>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : mediaLoading ? (\r\n                      <tr>\r\n                        <td colSpan='6' className='middle-align text-center'>\r\n                          <Spinner type='grow' />\r\n                        </td>\r\n                      </tr>\r\n                    ) : mediaDetails.docs.length === 0 && !mediaLoading ? (\r\n                      <tr>\r\n                        <td colSpan='6' className='middle-align text-center'>\r\n                          No Media found\r\n                        </td>\r\n                      </tr>\r\n                    ) : null}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    <tr>\r\n                      <th>No.</th>\r\n                      <th>Image Name</th>\r\n                      <th>Image Type</th>\r\n                      <th className='text-left'>Status</th>\r\n                      <th>Action</th>\r\n                    </tr>\r\n                  </tfoot>\r\n                </Table>\r\n                <div className='row float-right'>\r\n                  <div className='col-md-12'>\r\n                    {this.paginationSection(mediaDetails)}\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n            {/* ================ Modal Start ============== */}\r\n            <Modal isOpen={showModal} size='lg'>\r\n              <ModalHeader toggle={this.toggleMediaModal}>\r\n                {this.state.fields._id !== null ? (\r\n                  <span>Edit Media Management</span>\r\n                ) : (\r\n                  <span>Add Media Management</span>\r\n                )}\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <FormGroup row>\r\n                  <Col xs='6'>\r\n                    <label>Image Name</label>\r\n                    <input\r\n                      placeholder='Enter Image Name'\r\n                      rows='3'\r\n                      type='text'\r\n                      name='image_name'\r\n                      onChange={(e) => this.onFieldChange(e)}\r\n                      defaultValue={image_name}\r\n                      className={classnames('form-control', {\r\n                        'form-control input': true,\r\n                      })}\r\n                    />\r\n                    {errors.error_image_name.length > 0 ? (\r\n                      <em className='error invalid-feedback'>\r\n                        {errors.error_image_name}\r\n                      </em>\r\n                    ) : null}\r\n                  </Col>\r\n                  <Col xs='6'>\r\n                    <label>Image Type</label>\r\n                    <select\r\n                      type='text'\r\n                      name='imageType'\r\n                      value={imageType}\r\n                      onChange={(e) => this.onFieldChange(e)}\r\n                      className={classnames('form-control', {\r\n                        'form-control input': true,\r\n                      })}>\r\n                      <option value=''>Select Type</option>\r\n                      <option value={1}>Home</option>\r\n                      <option value={2}>Favicon</option>\r\n                    </select>\r\n\r\n                    {errors.error_imageType.length > 0 ? (\r\n                      <em className='error invalid-feedback'>\r\n                        {errors.error_imageType}\r\n                      </em>\r\n                    ) : null}\r\n                  </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                  <Col xs='6'>\r\n                    <label>Image</label>\r\n                    <input\r\n                      type='file'\r\n                      name='cover_photo'\r\n                      className=' file-input form-control'\r\n                      style={{ height: '42px' }}\r\n                      onChange={this.onPhotoChange}\r\n                    />\r\n                    <div className='file-info'>\r\n                      <em>\r\n                        (Note: Only JPEG, JPG, PNG, GIF image type allowed)\r\n                      </em>\r\n                    </div>\r\n                    {cover_photo_preview !== '' && (\r\n                      <img\r\n                        src={cover_photo_preview}\r\n                        alt='cover'\r\n                        className='w-50'\r\n                      />\r\n                    )}\r\n                    {errors.error_cover_photo.length > 0 ? (\r\n                      <em className='error invalid-feedback'>\r\n                        {errors.error_cover_photo}\r\n                      </em>\r\n                    ) : null}\r\n                  </Col>\r\n                </FormGroup>\r\n              </ModalBody>\r\n              <ModalFooter className='px-4'>\r\n                <LaddaButton\r\n                  className='btn btnColor btn-brand  btn-ladda'\r\n                  loading={saveLoading}\r\n                  data-color='blue'\r\n                  data-style={ZOOM_OUT}\r\n                  onClick={this.onSaveTour}>\r\n                  Save\r\n                </LaddaButton>\r\n                <button\r\n                  className='btn btn-outline cancel'\r\n                  onClick={this.toggleMediaModal}>\r\n                  <span> Cancel</span>\r\n                </button>\r\n              </ModalFooter>\r\n            </Modal>\r\n            {/* ================  Modal Close ============== */}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  mediaDetails: state.mediaDetails,\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n  getMediaDetails,\r\n  changeMediaStatus,\r\n  addMedia,\r\n  updateMedia,\r\n  getMediaDetailsById,\r\n  deleteMedia,\r\n})(MediaManagement)\r\n"],"sourceRoot":""}